
import Modul.handleCandlestickMessage
import Modul.sendCandleSubscription
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.websocket.*
import io.ktor.websocket.*
import kotlinx.coroutines.runBlocking

fun main() = runBlocking {
    val client = HttpClient(CIO) {
        install(WebSockets)
    }

    val instruments = listOf("BTC-USDT")

    client.webSocket("wss://ws.okx.com:8443/ws/v5/business") {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–≤–µ—á–∏
        sendCandleSubscription(instruments)

        println("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

        for (frame in incoming) {
            val text = (frame as? Frame.Text)?.readText() ?: continue
            println("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n$text") // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try {
                handleCandlestickMessage(text)
            } catch (e: Exception) {
                println("‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${e.message}")
            }
        }
    }
}
